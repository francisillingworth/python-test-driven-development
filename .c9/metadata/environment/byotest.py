{"changed":true,"filter":false,"title":"byotest.py","tooltip":"/byotest.py","value":"def test_are_equal(actual, expected):\n    \"\"\"\n    Test that two values are equal. Raises AssertionError if both values are\n    not equal.\n    `actual` is the actual value produced\n    `expected` is the value that was supposed to be produced\n    \"\"\"\n    assert expected == actual, \"Expected {0}, got {1}\".format(\n        expected, actual)\n\n\ndef test_not_equal(a, b):\n    \"\"\"\n    Test that two values are not equal. Raises AssertionError if both values\n    are not equal.\n    `a` is the actual value produced\n    `b` is the value that was supposed to be produced\n    \"\"\"\n    assert a != b, \"Did not expect {0} but got {1}\".format(a, b)\n\n\ndef test_is_in(collection, item):\n    \"\"\"\n    Check to ensure that a given collection contains a given value. Raises\n    AssertionError if `item` is not in `collection`\n    `collection` is the collection to be tested\n    `item` is the item that is being searched for\n    \"\"\"\n    assert item in collection, \"{0} does not contain {1}\".format(\n        collection, item)\n\n\ndef test_not_in(collection, item):\n    \"\"\"\n    Check to ensure that a given collection does not contain a given value.\n    Raises AssertionError if the `item` is found in `collection`\n    `collection` is the collection in question\n    `item` is the thing that we want to check for\n    \"\"\"\n    assert item not in collection, \"{0} is not in {1}\".format(\n        item, collection)\n\n\ndef test_between(upper_limit, lower_limit, actual):\n    \"\"\"\n    Check to ensure that a number is between two other numbers. Raises\n    AssertionError if the number is not between the other two numbers\n    \"\"\"\n    assert lower_limit <= actual <= upper_limit, \"{0} is not between {1} and {2}\".format(actual, lower_limit, upper_limit)","undoManager":{"mark":54,"position":55,"stack":[[{"start":{"row":0,"column":0},"end":{"row":46,"column":20},"action":"insert","lines":["\"\"\"","Solution to the first challenge in the `Build Your Own Test Framework` unit ","found in the `Test Driven Development with Python lesson`","NOTE: The solution found in this file is one of the many potential solutions","that can be used to achieve the end result expected by the challenge in the","lesson.","\"\"\"","","","def test_are_equal(actual, expected):","    \"\"\"","    Test that two values are equal. Raises AssertionError if both values are","    not equal.","    `actual` is the actual value produced","    `expected` is the value that was supposed to be produced","    \"\"\"","    assert expected == actual, \"Expected {0}, got {1}\".format(expected, actual)","","","def test_not_equal(a, b):","    \"\"\"","    Test that two values are not equal. Raises AssertionError if both values","    are not equal.","    `a` is the actual value produced","    `b` is the value that was supposed to be produced","    \"\"\"","    assert a != b, \"Did not expect {0} but got {1}\".format(a, b)","","","def test_is_in(collection, item):","    \"\"\"","    Check to ensure that a given collection contains a given value. Raises","    AssertionError if `item` is not in `collection`","    `collection` is the collection to be tested","    `item` is the item that is being searched for","    \"\"\"","    assert item in collection, \"{0} does not contain {1}\".format(collection, item)","","","# Test to fail the `test_are_equal` function","# test_are_equal(number_of_evens([1,2,3,4,5]), 2)","","# Test to fail the `test_not_equal` function","# test_not_equal(0, 0)","","# Test to fail the `test_is_in` function","# test_is_in([1], 2)"],"id":1}],[{"start":{"row":46,"column":20},"end":{"row":47,"column":0},"action":"insert","lines":["",""],"id":2},{"start":{"row":47,"column":0},"end":{"row":48,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":48,"column":0},"end":{"row":48,"column":1},"action":"insert","lines":["d"],"id":3},{"start":{"row":48,"column":1},"end":{"row":48,"column":2},"action":"insert","lines":["e"]},{"start":{"row":48,"column":2},"end":{"row":48,"column":3},"action":"insert","lines":["f"]}],[{"start":{"row":48,"column":3},"end":{"row":48,"column":4},"action":"insert","lines":[" "],"id":4}],[{"start":{"row":48,"column":4},"end":{"row":48,"column":16},"action":"insert","lines":["test_between"],"id":5}],[{"start":{"row":48,"column":16},"end":{"row":48,"column":18},"action":"insert","lines":["()"],"id":6}],[{"start":{"row":48,"column":17},"end":{"row":48,"column":18},"action":"insert","lines":["n"],"id":7},{"start":{"row":48,"column":18},"end":{"row":48,"column":19},"action":"insert","lines":["u"]},{"start":{"row":48,"column":19},"end":{"row":48,"column":20},"action":"insert","lines":["m"]},{"start":{"row":48,"column":20},"end":{"row":48,"column":21},"action":"insert","lines":["b"]},{"start":{"row":48,"column":21},"end":{"row":48,"column":22},"action":"insert","lines":["e"]},{"start":{"row":48,"column":22},"end":{"row":48,"column":23},"action":"insert","lines":["r"]},{"start":{"row":48,"column":23},"end":{"row":48,"column":24},"action":"insert","lines":["s"]}],[{"start":{"row":48,"column":25},"end":{"row":48,"column":26},"action":"insert","lines":[":"],"id":8}],[{"start":{"row":48,"column":26},"end":{"row":49,"column":0},"action":"insert","lines":["",""],"id":9},{"start":{"row":49,"column":0},"end":{"row":49,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":49,"column":4},"end":{"row":49,"column":5},"action":"insert","lines":["a"],"id":10},{"start":{"row":49,"column":5},"end":{"row":49,"column":6},"action":"insert","lines":["s"]},{"start":{"row":49,"column":6},"end":{"row":49,"column":7},"action":"insert","lines":["s"]},{"start":{"row":49,"column":7},"end":{"row":49,"column":8},"action":"insert","lines":["e"]},{"start":{"row":49,"column":8},"end":{"row":49,"column":9},"action":"insert","lines":["r"]},{"start":{"row":49,"column":9},"end":{"row":49,"column":10},"action":"insert","lines":["t"]}],[{"start":{"row":49,"column":10},"end":{"row":49,"column":11},"action":"insert","lines":[" "],"id":11}],[{"start":{"row":49,"column":11},"end":{"row":49,"column":12},"action":"insert","lines":["a"],"id":12}],[{"start":{"row":49,"column":12},"end":{"row":49,"column":13},"action":"insert","lines":["<"],"id":13}],[{"start":{"row":49,"column":13},"end":{"row":49,"column":14},"action":"insert","lines":["x"],"id":14}],[{"start":{"row":49,"column":14},"end":{"row":49,"column":15},"action":"insert","lines":[" "],"id":15},{"start":{"row":49,"column":15},"end":{"row":49,"column":16},"action":"insert","lines":["a"]},{"start":{"row":49,"column":16},"end":{"row":49,"column":17},"action":"insert","lines":["n"]},{"start":{"row":49,"column":17},"end":{"row":49,"column":18},"action":"insert","lines":["d"]}],[{"start":{"row":49,"column":18},"end":{"row":49,"column":19},"action":"insert","lines":[" "],"id":16}],[{"start":{"row":49,"column":19},"end":{"row":49,"column":20},"action":"insert","lines":["a"],"id":17},{"start":{"row":49,"column":20},"end":{"row":49,"column":21},"action":"insert","lines":["<"]}],[{"start":{"row":49,"column":20},"end":{"row":49,"column":21},"action":"remove","lines":["<"],"id":18}],[{"start":{"row":49,"column":20},"end":{"row":49,"column":21},"action":"insert","lines":[">"],"id":19},{"start":{"row":49,"column":21},"end":{"row":49,"column":22},"action":"insert","lines":["y"]}],[{"start":{"row":49,"column":12},"end":{"row":49,"column":13},"action":"insert","lines":["="],"id":20}],[{"start":{"row":49,"column":22},"end":{"row":49,"column":23},"action":"insert","lines":["="],"id":21}],[{"start":{"row":49,"column":24},"end":{"row":49,"column":25},"action":"insert","lines":[" "],"id":22},{"start":{"row":49,"column":25},"end":{"row":49,"column":26},"action":"insert","lines":[","]}],[{"start":{"row":49,"column":26},"end":{"row":49,"column":27},"action":"insert","lines":[" "],"id":23}],[{"start":{"row":49,"column":27},"end":{"row":49,"column":29},"action":"insert","lines":["\"\""],"id":24}],[{"start":{"row":49,"column":28},"end":{"row":49,"column":29},"action":"insert","lines":["{"],"id":25}],[{"start":{"row":49,"column":29},"end":{"row":49,"column":30},"action":"insert","lines":["a"],"id":26},{"start":{"row":49,"column":30},"end":{"row":49,"column":31},"action":"insert","lines":["{"]}],[{"start":{"row":49,"column":30},"end":{"row":49,"column":31},"action":"remove","lines":["{"],"id":27}],[{"start":{"row":49,"column":30},"end":{"row":49,"column":31},"action":"insert","lines":["}"],"id":28}],[{"start":{"row":49,"column":31},"end":{"row":49,"column":32},"action":"insert","lines":[" "],"id":29},{"start":{"row":49,"column":32},"end":{"row":49,"column":33},"action":"insert","lines":["i"]},{"start":{"row":49,"column":33},"end":{"row":49,"column":34},"action":"insert","lines":["s"]}],[{"start":{"row":49,"column":34},"end":{"row":49,"column":35},"action":"insert","lines":[" "],"id":30},{"start":{"row":49,"column":35},"end":{"row":49,"column":36},"action":"insert","lines":["b"]},{"start":{"row":49,"column":36},"end":{"row":49,"column":37},"action":"insert","lines":["e"]},{"start":{"row":49,"column":37},"end":{"row":49,"column":38},"action":"insert","lines":["t"]},{"start":{"row":49,"column":38},"end":{"row":49,"column":39},"action":"insert","lines":["w"]},{"start":{"row":49,"column":39},"end":{"row":49,"column":40},"action":"insert","lines":["e"]},{"start":{"row":49,"column":40},"end":{"row":49,"column":41},"action":"insert","lines":["e"]},{"start":{"row":49,"column":41},"end":{"row":49,"column":42},"action":"insert","lines":["n"]}],[{"start":{"row":49,"column":42},"end":{"row":49,"column":43},"action":"insert","lines":[" "],"id":31},{"start":{"row":49,"column":43},"end":{"row":49,"column":44},"action":"insert","lines":["{"]},{"start":{"row":49,"column":44},"end":{"row":49,"column":45},"action":"insert","lines":["x"]}],[{"start":{"row":49,"column":45},"end":{"row":49,"column":46},"action":"insert","lines":["}"],"id":32}],[{"start":{"row":49,"column":46},"end":{"row":49,"column":47},"action":"insert","lines":[" "],"id":33},{"start":{"row":49,"column":47},"end":{"row":49,"column":48},"action":"insert","lines":["n"]},{"start":{"row":49,"column":48},"end":{"row":49,"column":49},"action":"insert","lines":["a"]}],[{"start":{"row":49,"column":48},"end":{"row":49,"column":49},"action":"remove","lines":["a"],"id":34},{"start":{"row":49,"column":47},"end":{"row":49,"column":48},"action":"remove","lines":["n"]}],[{"start":{"row":49,"column":47},"end":{"row":49,"column":48},"action":"insert","lines":["a"],"id":35},{"start":{"row":49,"column":48},"end":{"row":49,"column":49},"action":"insert","lines":["n"]},{"start":{"row":49,"column":49},"end":{"row":49,"column":50},"action":"insert","lines":["d"]}],[{"start":{"row":49,"column":50},"end":{"row":49,"column":51},"action":"insert","lines":[" "],"id":36},{"start":{"row":49,"column":51},"end":{"row":49,"column":52},"action":"insert","lines":["y"]},{"start":{"row":49,"column":52},"end":{"row":49,"column":53},"action":"insert","lines":["{"]}],[{"start":{"row":49,"column":52},"end":{"row":49,"column":53},"action":"remove","lines":["{"],"id":37}],[{"start":{"row":49,"column":51},"end":{"row":49,"column":52},"action":"insert","lines":["{"],"id":38}],[{"start":{"row":49,"column":53},"end":{"row":49,"column":54},"action":"insert","lines":["}"],"id":39}],[{"start":{"row":49,"column":55},"end":{"row":49,"column":56},"action":"insert","lines":["."],"id":40}],[{"start":{"row":49,"column":56},"end":{"row":49,"column":57},"action":"insert","lines":[" "],"id":41},{"start":{"row":49,"column":57},"end":{"row":49,"column":58},"action":"insert","lines":["f"]},{"start":{"row":49,"column":58},"end":{"row":49,"column":59},"action":"insert","lines":["o"]},{"start":{"row":49,"column":59},"end":{"row":49,"column":60},"action":"insert","lines":["r"]},{"start":{"row":49,"column":60},"end":{"row":49,"column":61},"action":"insert","lines":["m"]},{"start":{"row":49,"column":61},"end":{"row":49,"column":62},"action":"insert","lines":["a"]},{"start":{"row":49,"column":62},"end":{"row":49,"column":63},"action":"insert","lines":["t"]}],[{"start":{"row":49,"column":63},"end":{"row":49,"column":65},"action":"insert","lines":["()"],"id":42}],[{"start":{"row":49,"column":64},"end":{"row":49,"column":65},"action":"insert","lines":["a"],"id":43},{"start":{"row":49,"column":65},"end":{"row":49,"column":66},"action":"insert","lines":[","]},{"start":{"row":49,"column":66},"end":{"row":49,"column":67},"action":"insert","lines":["x"]},{"start":{"row":49,"column":67},"end":{"row":49,"column":68},"action":"insert","lines":[","]}],[{"start":{"row":49,"column":68},"end":{"row":49,"column":69},"action":"insert","lines":["y"],"id":44}],[{"start":{"row":49,"column":70},"end":{"row":50,"column":0},"action":"insert","lines":["",""],"id":45},{"start":{"row":50,"column":0},"end":{"row":50,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":49,"column":56},"end":{"row":49,"column":57},"action":"remove","lines":[" "],"id":46}],[{"start":{"row":49,"column":24},"end":{"row":49,"column":25},"action":"remove","lines":[" "],"id":47}],[{"start":{"row":48,"column":0},"end":{"row":50,"column":4},"action":"remove","lines":["def test_between(numbers):","    assert a=<x and a>=y, \"{a} is between {x} and {y}\".format(a,x,y)","    "],"id":48},{"start":{"row":48,"column":0},"end":{"row":69,"column":26},"action":"insert","lines":["def test_between(upper_limit, lower_limit, actual):","    \"\"\"","    Check to ensure that a number is between two other numbers. Raises","    AssertionError if the number is not between the other two numbers","    \"\"\"","    assert lower_limit <= actual <= upper_limit, \"{0} is not between {1} and {2}\".format(actual, lower_limit, upper_limit)","","","# Test to fail the `test_are_equal` function","# test_are_equal(number_of_evens([1,2,3,4,5]), 2)","","# Test to fail the `test_not_equal` function","# test_not_equal(0, 0)","","# Test to fail the `test_is_in` function","# test_is_in([1], 2)","","# Test to fail the `test_not_in` function","# test_not_in([1], 1)","","# Test to fail the `test_between` function","# test_between(10, 1, 200)"]}],[{"start":{"row":56,"column":0},"end":{"row":66,"column":21},"action":"remove","lines":["# Test to fail the `test_are_equal` function","# test_are_equal(number_of_evens([1,2,3,4,5]), 2)","","# Test to fail the `test_not_equal` function","# test_not_equal(0, 0)","","# Test to fail the `test_is_in` function","# test_is_in([1], 2)","","# Test to fail the `test_not_in` function","# test_not_in([1], 1)"],"id":49}],[{"start":{"row":55,"column":0},"end":{"row":56,"column":0},"action":"remove","lines":["",""],"id":50},{"start":{"row":54,"column":0},"end":{"row":55,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":57,"column":1},"end":{"row":57,"column":2},"action":"remove","lines":[" "],"id":51},{"start":{"row":57,"column":0},"end":{"row":57,"column":1},"action":"remove","lines":["#"]}],[{"start":{"row":57,"column":20},"end":{"row":57,"column":23},"action":"remove","lines":["200"],"id":52},{"start":{"row":57,"column":20},"end":{"row":57,"column":21},"action":"insert","lines":["5"]}],[{"start":{"row":57,"column":20},"end":{"row":57,"column":21},"action":"remove","lines":["5"],"id":53}],[{"start":{"row":57,"column":20},"end":{"row":57,"column":21},"action":"insert","lines":["2"],"id":54},{"start":{"row":57,"column":21},"end":{"row":57,"column":22},"action":"insert","lines":["0"]},{"start":{"row":57,"column":22},"end":{"row":57,"column":23},"action":"insert","lines":["0"]}],[{"start":{"row":0,"column":0},"end":{"row":57,"column":24},"action":"remove","lines":["\"\"\"","Solution to the first challenge in the `Build Your Own Test Framework` unit ","found in the `Test Driven Development with Python lesson`","NOTE: The solution found in this file is one of the many potential solutions","that can be used to achieve the end result expected by the challenge in the","lesson.","\"\"\"","","","def test_are_equal(actual, expected):","    \"\"\"","    Test that two values are equal. Raises AssertionError if both values are","    not equal.","    `actual` is the actual value produced","    `expected` is the value that was supposed to be produced","    \"\"\"","    assert expected == actual, \"Expected {0}, got {1}\".format(expected, actual)","","","def test_not_equal(a, b):","    \"\"\"","    Test that two values are not equal. Raises AssertionError if both values","    are not equal.","    `a` is the actual value produced","    `b` is the value that was supposed to be produced","    \"\"\"","    assert a != b, \"Did not expect {0} but got {1}\".format(a, b)","","","def test_is_in(collection, item):","    \"\"\"","    Check to ensure that a given collection contains a given value. Raises","    AssertionError if `item` is not in `collection`","    `collection` is the collection to be tested","    `item` is the item that is being searched for","    \"\"\"","    assert item in collection, \"{0} does not contain {1}\".format(collection, item)","","","# Test to fail the `test_are_equal` function","# test_are_equal(number_of_evens([1,2,3,4,5]), 2)","","# Test to fail the `test_not_equal` function","# test_not_equal(0, 0)","","# Test to fail the `test_is_in` function","# test_is_in([1], 2)","","def test_between(upper_limit, lower_limit, actual):","    \"\"\"","    Check to ensure that a number is between two other numbers. Raises","    AssertionError if the number is not between the other two numbers","    \"\"\"","    assert lower_limit <= actual <= upper_limit, \"{0} is not between {1} and {2}\".format(actual, lower_limit, upper_limit)","","","# Test to fail the `test_between` function","test_between(10, 1, 200)"],"id":55},{"start":{"row":0,"column":0},"end":{"row":73,"column":24},"action":"insert","lines":["\"\"\"","Solution to the third challenge in the `Build Your Own Test Framework` unit ","found in the `Test Driven Development with Python lesson`","NOTE: The solution found in this file is one of the many potential solutions","that can be used to achieve the end result expected by the challenge in the","lesson.","\"\"\"","","","def test_are_equal(actual, expected):","    \"\"\"","    Test that two values are equal. Raises AssertionError if both values are","    not equal.","    `actual` is the actual value produced","    `expected` is the value that was supposed to be produced","    \"\"\"","    assert expected == actual, \"Expected {0}, got {1}\".format(","        expected, actual)","","","def test_not_equal(a, b):","    \"\"\"","    Test that two values are not equal. Raises AssertionError if both values","    are not equal.","    `a` is the actual value produced","    `b` is the value that was supposed to be produced","    \"\"\"","    assert a != b, \"Did not expect {0} but got {1}\".format(a, b)","","","def test_is_in(collection, item):","    \"\"\"","    Check to ensure that a given collection contains a given value. Raises","    AssertionError if `item` is not in `collection`","    `collection` is the collection to be tested","    `item` is the item that is being searched for","    \"\"\"","    assert item in collection, \"{0} does not contain {1}\".format(","        collection, item)","","","def test_not_in(collection, item):","    \"\"\"","    Check to ensure that a given collection does not contain a given value.","    Raises AssertionError if the `item` is found in `collection`","    `collection` is the collection in question","    `item` is the thing that we want to check for","    \"\"\"","    assert item not in collection, \"{0} is not in {1}\".format(","        item, collection)","","","def test_between(upper_limit, lower_limit, actual):","    \"\"\"","    Check to ensure that a number is between two other numbers. Raises","    AssertionError if the number is not between the other two numbers","    \"\"\"","    assert lower_limit <= actual <= upper_limit, \"{0} is not between {1} and {2}\".format(actual, lower_limit, upper_limit)","","","# Test to fail the `test_are_equal` function","# test_are_equal(number_of_evens([1,2,3,4,5]), 2)","","# Test to fail the `test_not_equal` function","# test_not_equal(0, 0)","","# Test to fail the `test_is_in` function","# test_is_in([1], 2)","","# Test to fail the `test_not_in` function","# test_not_in([1], 1)","","# Test to fail the `test_between` function","test_between(10, 1, 200)"]}],[{"start":{"row":0,"column":0},"end":{"row":73,"column":24},"action":"remove","lines":["\"\"\"","Solution to the third challenge in the `Build Your Own Test Framework` unit ","found in the `Test Driven Development with Python lesson`","NOTE: The solution found in this file is one of the many potential solutions","that can be used to achieve the end result expected by the challenge in the","lesson.","\"\"\"","","","def test_are_equal(actual, expected):","    \"\"\"","    Test that two values are equal. Raises AssertionError if both values are","    not equal.","    `actual` is the actual value produced","    `expected` is the value that was supposed to be produced","    \"\"\"","    assert expected == actual, \"Expected {0}, got {1}\".format(","        expected, actual)","","","def test_not_equal(a, b):","    \"\"\"","    Test that two values are not equal. Raises AssertionError if both values","    are not equal.","    `a` is the actual value produced","    `b` is the value that was supposed to be produced","    \"\"\"","    assert a != b, \"Did not expect {0} but got {1}\".format(a, b)","","","def test_is_in(collection, item):","    \"\"\"","    Check to ensure that a given collection contains a given value. Raises","    AssertionError if `item` is not in `collection`","    `collection` is the collection to be tested","    `item` is the item that is being searched for","    \"\"\"","    assert item in collection, \"{0} does not contain {1}\".format(","        collection, item)","","","def test_not_in(collection, item):","    \"\"\"","    Check to ensure that a given collection does not contain a given value.","    Raises AssertionError if the `item` is found in `collection`","    `collection` is the collection in question","    `item` is the thing that we want to check for","    \"\"\"","    assert item not in collection, \"{0} is not in {1}\".format(","        item, collection)","","","def test_between(upper_limit, lower_limit, actual):","    \"\"\"","    Check to ensure that a number is between two other numbers. Raises","    AssertionError if the number is not between the other two numbers","    \"\"\"","    assert lower_limit <= actual <= upper_limit, \"{0} is not between {1} and {2}\".format(actual, lower_limit, upper_limit)","","","# Test to fail the `test_are_equal` function","# test_are_equal(number_of_evens([1,2,3,4,5]), 2)","","# Test to fail the `test_not_equal` function","# test_not_equal(0, 0)","","# Test to fail the `test_is_in` function","# test_is_in([1], 2)","","# Test to fail the `test_not_in` function","# test_not_in([1], 1)","","# Test to fail the `test_between` function","test_between(10, 1, 200)"],"id":56},{"start":{"row":0,"column":0},"end":{"row":48,"column":122},"action":"insert","lines":["def test_are_equal(actual, expected):","    \"\"\"","    Test that two values are equal. Raises AssertionError if both values are","    not equal.","    `actual` is the actual value produced","    `expected` is the value that was supposed to be produced","    \"\"\"","    assert expected == actual, \"Expected {0}, got {1}\".format(","        expected, actual)","","","def test_not_equal(a, b):","    \"\"\"","    Test that two values are not equal. Raises AssertionError if both values","    are not equal.","    `a` is the actual value produced","    `b` is the value that was supposed to be produced","    \"\"\"","    assert a != b, \"Did not expect {0} but got {1}\".format(a, b)","","","def test_is_in(collection, item):","    \"\"\"","    Check to ensure that a given collection contains a given value. Raises","    AssertionError if `item` is not in `collection`","    `collection` is the collection to be tested","    `item` is the item that is being searched for","    \"\"\"","    assert item in collection, \"{0} does not contain {1}\".format(","        collection, item)","","","def test_not_in(collection, item):","    \"\"\"","    Check to ensure that a given collection does not contain a given value.","    Raises AssertionError if the `item` is found in `collection`","    `collection` is the collection in question","    `item` is the thing that we want to check for","    \"\"\"","    assert item not in collection, \"{0} is not in {1}\".format(","        item, collection)","","","def test_between(upper_limit, lower_limit, actual):","    \"\"\"","    Check to ensure that a number is between two other numbers. Raises","    AssertionError if the number is not between the other two numbers","    \"\"\"","    assert lower_limit <= actual <= upper_limit, \"{0} is not between {1} and {2}\".format(actual, lower_limit, upper_limit)"]}]]},"ace":{"folds":[],"scrolltop":166,"scrollleft":363.1953125,"selection":{"start":{"row":48,"column":122},"end":{"row":48,"column":122},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1560527505209}